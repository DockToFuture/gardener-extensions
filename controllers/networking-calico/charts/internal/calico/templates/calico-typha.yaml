{{- if .Values.config.typha.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-typha
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: typha-cpha
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: typha-cpva
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRole
metadata:
  name: typha-cpha
  labels:
    kubernetes.io/cluster-service: "true"
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch", "get"]
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRole
metadata:
  name: typha-cpva
  labels:
    kubernetes.io/cluster-service: "true"
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list"]
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments"]
    verbs: ["patch"]
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRole
metadata:
  name: garden.sapcloud.io:psp:kube-system:calico-typha
rules:
- apiGroups:
  - policy
  - extensions
  resourceNames:
  - gardener.kube-system.calico-typha
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRole
metadata:
  name: gardener.cloud:psp:kube-system:typha-cpha
rules:
  - apiGroups:
      - policy
      - extensions
    resourceNames:
      - gardener.kube-system.typha-cpa
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRole
metadata:
  name: gardener.cloud:psp:kube-system:typha-cpva
rules:
  - apiGroups:
      - policy
      - extensions
    resourceNames:
      - gardener.kube-system.typha-cpva
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: {{ include "rbacversion" . }}
kind: Role
metadata:
  name: typha-cpha
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments/scale"]
    verbs: ["get", "update"]
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRoleBinding
metadata:
  name: typha-cpha
  labels:
    kubernetes.io/cluster-service: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: typha-cpha
subjects:
  - kind: ServiceAccount
    name: typha-cpha
    namespace: kube-system
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRoleBinding
metadata:
  name: typha-cpva
  labels:
    kubernetes.io/cluster-service: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: typha-cpva
subjects:
  - kind: ServiceAccount
    name: typha-cpva
    namespace: kube-system
---
apiVersion: {{ include "rbacversion" . }}
kind: RoleBinding
metadata:
  name: typha-cpha
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: typha-cpha
subjects:
  - kind: ServiceAccount
    name: typha-cpha
    namespace: kube-system
---
apiVersion: {{ include "rbacversion" . }}
kind: RoleBinding
metadata:
  name: garden.sapcloud.io:psp:calico-typha
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: garden.sapcloud.io:psp:kube-system:calico-typha
subjects:
- kind: ServiceAccount
  name: calico-typha
  namespace: kube-system
---
apiVersion: {{ include "rbacversion" . }}
kind: RoleBinding
metadata:
  name: gardener.cloud:psp:typha-cpa
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gardener.cloud:psp:kube-system:typha-cpha
subjects:
  - kind: ServiceAccount
    name: typha-cpha
    namespace: kube-system
---
apiVersion: {{ include "rbacversion" . }}
kind: RoleBinding
metadata:
  name: gardener.cloud:psp:typha-cpva
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gardener.cloud:psp:kube-system:typha-cpva
subjects:
  - kind: ServiceAccount
    name: typha-cpva
    namespace: kube-system
---
apiVersion: {{ include "podsecuritypolicyversion" .}}
kind: PodSecurityPolicy
metadata:
  name: gardener.kube-system.typha-cpa
spec:
  volumes:
  - secret
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
---
apiVersion: {{ include "podsecuritypolicyversion" .}}
kind: PodSecurityPolicy
metadata:
  name: gardener.kube-system.calico-typha
spec:
  volumes:
  - secret
  hostNetwork: true
  hostPorts:
  - min: 5473
    max: 5473
  - min: 9098
    max: 9098
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
---
apiVersion: {{ include "podsecuritypolicyversion" .}}
kind: PodSecurityPolicy
metadata:
  name: gardener.cloud.typha-cpva
spec:
  volumes:
  - secret
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65534
---
# This manifest creates a Service, which will be backed by Calico's Typha daemon.
# Typha sits in between Felix and the API server, reducing Calico's load on the API server.
apiVersion: v1
kind: Service
metadata:
  name: calico-typha
  namespace: kube-system
  labels:
    k8s-app: calico-typha
spec:
  ports:
    - port: 5473
      protocol: TCP
      targetPort: calico-typha
      name: calico-typha
  selector:
    k8s-app: calico-typha
---
# This manifest creates a Deployment of Typha to back the above service.
apiVersion: {{ include "deploymentversion" . }}
kind: Deployment
metadata:
  # We changed the name of the default deployment name from "calico-typha" to "calico-typha-deploy" because
  # Gardener deployed calico-typha with 0 replicas. Now, we don't specify `.spec.replicas` anymore (because we
  # use the typha-HPA for auto-scaling), hence, for existing clusters the replicas will never get `1` (because
  # the typha-HPA is a new pod that cannot start without typha to run).
  name: calico-typha-deploy
  namespace: kube-system
  annotations:
    # This, along with the CriticalAddonsOnly toleration below, marks the pod as a critical
    # add-on, ensuring it gets priority scheduling and that its resources are reserved
    # if it ever gets evicted.
    scheduler.alpha.kubernetes.io/critical-pod: ''
    cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
  labels:
    k8s-app: calico-typha
    garden.sapcloud.io/role: system-component
spec:
  revisionHistoryLimit: 0
  strategy:
    type: Recreate
  selector:
    matchLabels:
      k8s-app: calico-typha
  # Number of Typha replicas.  To enable Typha, set this to a non-zero value *and* set the
  # typha_service_name variable in the calico-config ConfigMap above.
  #
  # We recommend using Typha if you have more than 50 nodes.  Above 100 nodes it is essential
  # (when using the Kubernetes datastore).  Use one replica for every 100-200 nodes.  In
  # production, we recommend running at least 3 replicas to reduce the impact of rolling upgrade.
  template:
    metadata:
      labels:
        origin: gardener
        garden.sapcloud.io/role: system-component
        k8s-app: calico-typha
      annotations:
        # This, along with the CriticalAddonsOnly toleration below, marks the pod as a critical
        # add-on, ensuring it gets priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      tolerations:
      # Mark the pod as a critical add-on for rescheduling.
      - key: CriticalAddonsOnly
        operator: Exists
      # Since Calico can't network a pod until Typha is up, we need to run Typha itself
      # as a host-networked pod.
      hostNetwork: true
      priorityClassName: system-cluster-critical
      serviceAccountName: calico-typha
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - image: {{ index .Values.images "calico-typha" }}
        name: calico-typha
        ports:
        - containerPort: 5473
          name: calico-typha
          protocol: TCP
        env:
          {{- if eq .Values.config.ipam.type "host-local"}}
          - name: USE_POD_CIDR
            value: "true"
          {{- end }}
          # Enable "info" logging by default.  Can be set to "debug" to increase verbosity.
          - name: TYPHA_LOGSEVERITYSCREEN
            value: "error"
          # Disable logging to file and syslog since those don't make sense in Kubernetes.
          - name: TYPHA_LOGFILEPATH
            value: "none"
          - name: TYPHA_LOGSEVERITYSYS
            value: "none"
          # Monitor the Kubernetes API to find the number of running instances and rebalance
          # connections.
          - name: TYPHA_CONNECTIONREBALANCINGMODE
            value: "kubernetes"
          - name: TYPHA_DATASTORETYPE
            value: "kubernetes"
          - name: TYPHA_HEALTHENABLED
            value: "true"
          # Uncomment these lines to enable prometheus metrics.  Since Typha is host-networked,
          # this opens a port on the host, which may need to be secured.
#          - name: TYPHA_PROMETHEUSMETRICSENABLED
#            value: "true"
#          - name: TYPHA_PROMETHEUSMETRICSPORT
#            value: "9093"
        livenessProbe:
          httpGet:
            path: /liveness
            port: 9098
            host: localhost
          periodSeconds: 30
          initialDelaySeconds: 30
        readinessProbe:
          httpGet:
            path: /readiness
            port: 9098
            host: localhost
          periodSeconds: 10
---
apiVersion: {{ include "deploymentversion" . }}
kind: Deployment
metadata:
  name: calico-typha-horizontal-autoscaler
  namespace: kube-system
  labels:
    k8s-app: calico-typha-autoscaler
    kubernetes.io/cluster-service: "true"
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-typha-autoscaler
  template:
    metadata:
      annotations:
        checksum/configmap-calico-typha-horizontal-autoscaler: {{ include (print $.Template.BasePath "/typha-horizontal-autoscaling-config.yaml") . | sha256sum }}
      labels:
        k8s-app: calico-typha-autoscaler
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        supplementalGroups: [ 65534 ]
        fsGroup: 65534
        runAsUser: 65534
      containers:
        - image: {{ index .Values.images "typha-cpa" }}
          name: autoscaler
          command:
            - /cluster-proportional-autoscaler
            - --namespace=kube-system
            - --configmap=calico-typha-horizontal-autoscaler
            - --target=deployment/calico-typha-deploy
            - --logtostderr=true
            - --v=2
          resources:
            requests:
              cpu: 10m
            limits:
              cpu: 10m
      serviceAccountName: typha-cpha
---
kind: Deployment
apiVersion: {{ include "deploymentversion" . }}
metadata:
  name: calico-typha-vertical-autoscaler
  namespace: kube-system
  labels:
    k8s-app: calico-typha-autoscaler
    kubernetes.io/cluster-service: "true"
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-typha-autoscaler
  template:
    metadata:
      annotations:
        checksum/configmap-calico-typha-vertical-autoscaler: {{ include (print $.Template.BasePath "/typha-vertical-autoscaling-config.yaml") . | sha256sum }}
      labels:
        k8s-app: calico-typha-autoscaler
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        runAsUser: 65534
      containers:
        - image:  {{ index .Values.images "typha-cpva" }}
          name: autoscaler
          command:
            - /cpvpa
            - --target=deployment/calico-typha-deploy
            - --namespace=kube-system
            - --logtostderr=true
            - --poll-period-seconds=30
            - --v=2
            - --config-file=/etc/config/typha-autoscaler
          volumeMounts:
            - name: config
              mountPath: /etc/config
      volumes:
        - name: config
          configMap:
            name: calico-typha-vertical-autoscaler
      serviceAccountName: typha-cpva
---
# This manifest creates a Pod Disruption Budget for Typha to allow K8s Cluster Autoscaler to evict
 apiVersion: {{ include "poddisruptionbudgetversion" . }}
 kind: PodDisruptionBudget
 metadata:
   name: calico-typha
   namespace: kube-system
   labels:
     k8s-app: calico-typha
 spec:
   maxUnavailable: 1
   selector:
     matchLabels:
       k8s-app: calico-typha
{{- end }}
